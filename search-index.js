var searchIndex={};
searchIndex["codegen"] = {"doc":"Provides a builder API for generating Rust code.","i":[[3,"AssociatedType","codegen","Defines an associated type.",null,null],[12,"0","","",0,null],[3,"Block","","Defines a code block. This is used to define a function…",null,null],[3,"Field","","Defines a struct field.",null,null],[12,"name","","Field name",1,null],[12,"ty","","Field type",1,null],[12,"documentation","","Field documentation",1,null],[12,"annotation","","Field annotation",1,null],[3,"Formatter","","Configures how a scope is formatted.",null,null],[3,"Function","","Defines a function.",null,null],[12,"body","","Body contents",2,null],[3,"Import","","Defines an import (`use` statement).",null,null],[12,"vis","","Function visibility",3,null],[3,"Module","","Defines a module.",null,null],[12,"name","","Module name",4,null],[3,"Scope","","Defines a scope.",null,null],[3,"Variant","","Defines an enum variant.",null,null],[3,"Enum","","Defines an enumeration.",null,null],[3,"Impl","","Defines an impl block.",null,null],[3,"Struct","","Defines a struct.",null,null],[3,"Trait","","Define a trait.",null,null],[3,"Type","","Defines a type.",null,null],[5,"fmt_generics","","Format generics.",null,[[["formatter"]],["result"]]],[5,"fmt_bounds","","Format generic bounds.",null,[[["formatter"]],["result"]]],[5,"fmt_bound_rhs","","Format multiple generic bounds.",null,[[["formatter"]],["result"]]],[11,"bound","","Add a bound to the associated type.",0,[[["self"],["t"]],["self"]]],[11,"new","","Returns an empty code block.",5,[[["str"]],["self"]]],[11,"line","","Push a line to the code block.",5,[[["self"],["t"]],["self"]]],[11,"push_block","","Push a nested block to this block.",5,[[["self"],["block"]],["self"]]],[11,"after","","Add a snippet after the block.",5,[[["str"],["self"]],["self"]]],[11,"fmt","","Formats the block using the given formatter.",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a field definition with the provided name and type",1,[[["str"],["t"]],["self"]]],[11,"doc","","Set field's documentation.",1,[[["str"],["self"],["vec",["str"]]],["self"]]],[11,"annotation","","Set field's annotation.",1,[[["str"],["self"],["vec",["str"]]],["self"]]],[11,"new","","Return a new formatter that writes to the given string.",6,[[["string"]],["self"]]],[11,"block","","Wrap the given function inside a block.",6,[[["self"],["f"]],["result"]]],[11,"indent","","Call the given function with the indentation level…",6,[[["self"],["f"]],["r"]]],[11,"is_start_of_line","","Check if current destination is the start of a new line.",6,[[["self"]],["bool"]]],[11,"new","","Return a new function definition.",2,[[["str"]],["self"]]],[11,"doc","","Set the function documentation.",2,[[["str"],["self"]],["self"]]],[11,"allow","","Specify lint attribute to supress a warning or error.",2,[[["str"],["self"]],["self"]]],[11,"vis","","Set the function visibility.",2,[[["str"],["self"]],["self"]]],[11,"set_async","","Set whether this function is async or not",2,[[["self"],["bool"]],["self"]]],[11,"generic","","Add a generic to the function.",2,[[["str"],["self"]],["self"]]],[11,"arg_self","","Add `self` as a function argument.",2,[[["self"]],["self"]]],[11,"arg_ref_self","","Add `&self` as a function argument.",2,[[["self"]],["self"]]],[11,"arg_mut_self","","Add `&mut self` as a function argument.",2,[[["self"]],["self"]]],[11,"arg","","Add a function argument.",2,[[["str"],["self"],["t"]],["self"]]],[11,"ret","","Set the function return type.",2,[[["self"],["t"]],["self"]]],[11,"bound","","Add a `where` bound to the function.",2,[[["str"],["self"],["t"]],["self"]]],[11,"line","","Push a line to the function implementation.",2,[[["self"],["t"]],["self"]]],[11,"attr","","Add an attribute to the function.",2,[[["str"],["self"]],["self"]]],[11,"extern_abi","","Specify an `extern` ABI for the function. ``` use…",2,[[["str"],["self"]],["self"]]],[11,"push_block","","Push a block to the function implementation",2,[[["self"],["block"]],["self"]]],[11,"fmt","","Formats the function using the given formatter.",2,[[["formatter"],["self"],["bool"]],["result"]]],[11,"new","","Return a new import.",3,[[["str"]],["self"]]],[11,"vis","","Set the import visibility.",3,[[["str"],["self"]],["self"]]],[11,"new","","Return a new, blank module",4,[[["str"]],["self"]]],[11,"scope","","Returns a mutable reference to the module's scope.",4,[[["self"]],["scope"]]],[11,"vis","","Set the module visibility.",4,[[["str"],["self"]],["self"]]],[11,"import","","Import a type into the module's scope.",4,[[["str"],["self"]],["self"]]],[11,"new_module","","Push a new module definition, returning a mutable…",4,[[["str"],["self"]],["module"]]],[11,"get_module","","Returns a reference to a module if it is exists in this…",4,[[["self"],["q"]],[["option",["module"]],["module"]]]],[11,"get_module_mut","","Returns a mutable reference to a module if it is exists in…",4,[[["self"],["q"]],[["option",["module"]],["module"]]]],[11,"get_or_new_module","","Returns a mutable reference to a module, creating it if it…",4,[[["str"],["self"]],["module"]]],[11,"push_module","","Push a module definition.",4,[[["module"],["self"]],["self"]]],[11,"new_struct","","Push a new struct definition, returning a mutable…",4,[[["str"],["self"]],["struct"]]],[11,"push_struct","","Push a structure definition",4,[[["self"],["struct"]],["self"]]],[11,"new_fn","","Push a new function definition, returning a mutable…",4,[[["str"],["self"]],["function"]]],[11,"push_fn","","Push a function definition",4,[[["function"],["self"]],["self"]]],[11,"new_enum","","Push a new enum definition, returning a mutable reference…",4,[[["str"],["self"]],["enum"]]],[11,"push_enum","","Push an enum definition",4,[[["self"],["enum"]],["self"]]],[11,"new_impl","","Push a new `impl` block, returning a mutable reference to…",4,[[["str"],["self"]],["impl"]]],[11,"push_impl","","Push an `impl` block.",4,[[["self"],["impl"]],["self"]]],[11,"push_trait","","Push a trait definition",4,[[["self"],["trait"]],["self"]]],[11,"fmt","","Formats the module using the given formatter.",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new scope",7,[[],["self"]]],[11,"import","","Import a type into the scope.",7,[[["str"],["self"]],["import"]]],[11,"new_module","","Push a new module definition, returning a mutable…",7,[[["str"],["self"]],["module"]]],[11,"get_module_mut","","Returns a mutable reference to a module if it is exists in…",7,[[["self"],["q"]],[["option",["module"]],["module"]]]],[11,"get_module","","Returns a mutable reference to a module if it is exists in…",7,[[["self"],["q"]],[["option",["module"]],["module"]]]],[11,"get_or_new_module","","Returns a mutable reference to a module, creating it if it…",7,[[["str"],["self"]],["module"]]],[11,"push_module","","Push a module definition.",7,[[["module"],["self"]],["self"]]],[11,"new_struct","","Push a new struct definition, returning a mutable…",7,[[["str"],["self"]],["struct"]]],[11,"push_struct","","Push a struct definition",7,[[["self"],["struct"]],["self"]]],[11,"new_fn","","Push a new function definition, returning a mutable…",7,[[["str"],["self"]],["function"]]],[11,"push_fn","","Push a function definition",7,[[["function"],["self"]],["self"]]],[11,"new_trait","","Push a new trait definition, returning a mutable reference…",7,[[["str"],["self"]],["trait"]]],[11,"push_trait","","Push a trait definition",7,[[["self"],["trait"]],["self"]]],[11,"new_enum","","Push a new struct definition, returning a mutable…",7,[[["str"],["self"]],["enum"]]],[11,"push_enum","","Push a structure definition",7,[[["self"],["enum"]],["self"]]],[11,"new_impl","","Push a new `impl` block, returning a mutable reference to…",7,[[["str"],["self"]],["impl"]]],[11,"push_impl","","Push an `impl` block.",7,[[["self"],["impl"]],["self"]]],[11,"raw","","Push a raw string to the scope.",7,[[["str"],["self"]],["self"]]],[11,"to_string","","Return a string representation of the scope.",7,[[["self"]],["string"]]],[11,"fmt","","Formats the scope using the given formatter.",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a new enum variant with the given name.",8,[[["str"]],["self"]]],[11,"named","","Add a named field to the variant.",8,[[["str"],["self"],["t"]],["self"]]],[11,"tuple","","Add a tuple field to the variant.",8,[[["str"],["self"]],["self"]]],[11,"fmt","","Formats the variant using the given formatter.",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a enum definition with the provided name.",9,[[["str"]],["self"]]],[11,"ty","","Returns a reference to the type.",9,[[["self"]],["type"]]],[11,"vis","","Set the enum visibility.",9,[[["str"],["self"]],["self"]]],[11,"generic","","Add a generic to the enum.",9,[[["str"],["self"]],["self"]]],[11,"bound","","Add a `where` bound to the enum.",9,[[["str"],["self"],["t"]],["self"]]],[11,"doc","","Set the enum documentation.",9,[[["str"],["self"]],["self"]]],[11,"derive","","Add a new type that the struct should derive.",9,[[["str"],["self"]],["self"]]],[11,"allow","","Specify lint attribute to supress a warning or error.",9,[[["str"],["self"]],["self"]]],[11,"repr","","Specify representation.",9,[[["str"],["self"]],["self"]]],[11,"new_variant","","Push a variant to the enum, returning a mutable reference…",9,[[["str"],["self"]],["variant"]]],[11,"push_variant","","Push a variant to the enum.",9,[[["self"],["variant"]],["self"]]],[11,"fmt","","Formats the enum using the given formatter.",9,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a new impl definition",10,[[["t"]],["self"]]],[11,"generic","","Add a generic to the impl block.",10,[[["str"],["self"]],["self"]]],[11,"target_generic","","Add a generic to the target type.",10,[[["self"],["t"]],["self"]]],[11,"impl_trait","","Set the trait that the impl block is implementing.",10,[[["self"],["t"]],["self"]]],[11,"macro","","Add a macro to the impl block (e.g. `\"#[async_trait]\"`)",10,[[["str"],["self"]],["self"]]],[11,"associate_type","","Set an associated type.",10,[[["str"],["self"],["t"]],["self"]]],[11,"bound","","Add a `where` bound to the impl block.",10,[[["str"],["self"],["t"]],["self"]]],[11,"new_fn","","Push a new function definition, returning a mutable…",10,[[["str"],["self"]],["function"]]],[11,"push_fn","","Push a function definition.",10,[[["function"],["self"]],["self"]]],[11,"fmt","","Formats the impl block using the given formatter.",10,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a structure definition with the provided name",11,[[["str"]],["self"]]],[11,"ty","","Returns a reference to the type",11,[[["self"]],["type"]]],[11,"vis","","Set the structure visibility.",11,[[["str"],["self"]],["self"]]],[11,"generic","","Add a generic to the struct.",11,[[["str"],["self"]],["self"]]],[11,"bound","","Add a `where` bound to the struct.",11,[[["str"],["self"],["t"]],["self"]]],[11,"doc","","Set the structure documentation.",11,[[["str"],["self"]],["self"]]],[11,"derive","","Add a new type that the struct should derive.",11,[[["str"],["self"]],["self"]]],[11,"allow","","Specify lint attribute to supress a warning or error.",11,[[["str"],["self"]],["self"]]],[11,"repr","","Specify representation.",11,[[["str"],["self"]],["self"]]],[11,"push_field","","Push a named field to the struct.",11,[[["self"],["field"]],["self"]]],[11,"field","","Add a named field to the struct.",11,[[["str"],["self"],["t"]],["self"]]],[11,"tuple_field","","Add a tuple field to the struct.",11,[[["self"],["t"]],["self"]]],[11,"fmt","","Formats the struct using the given formatter.",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a trait definition with the provided name",12,[[["str"]],["self"]]],[11,"ty","","Returns a reference to the type",12,[[["self"]],["type"]]],[11,"vis","","Set the trait visibility.",12,[[["str"],["self"]],["self"]]],[11,"generic","","Add a generic to the trait",12,[[["str"],["self"]],["self"]]],[11,"bound","","Add a `where` bound to the trait.",12,[[["str"],["self"],["t"]],["self"]]],[11,"macro","","Add a macro to the trait def (e.g. `\"#[async_trait]\"`)",12,[[["str"],["self"]],["self"]]],[11,"parent","","Add a parent trait.",12,[[["self"],["t"]],["self"]]],[11,"doc","","Set the trait documentation.",12,[[["str"],["self"]],["self"]]],[11,"associated_type","","Add an associated type. Returns a mutable reference to the…",12,[[["str"],["self"]],["associatedtype"]]],[11,"new_fn","","Push a new function definition, returning a mutable…",12,[[["str"],["self"]],["function"]]],[11,"push_fn","","Push a function definition.",12,[[["function"],["self"]],["self"]]],[11,"fmt","","Formats the scope using the given formatter.",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a new type with the given name.",13,[[["str"]],["self"]]],[11,"generic","","Add a generic to the type.",13,[[["self"],["t"]],["self"]]],[11,"path","","Rewrite the `Type` with the provided path",13,[[["str"],["self"]],["type"]]],[11,"fmt","","Formats the struct using the given formatter.",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",13,[[["str"]],["self"]]],[11,"from","","",13,[[["string"]],["self"]]],[11,"from","","",13,[[["string"]],["self"]]],[11,"from","","",13,[[["type"]],["self"]]],[11,"clone","","",0,[[["self"]],["associatedtype"]]],[11,"clone","","",5,[[["self"]],["block"]]],[11,"clone","","",1,[[["self"]],["field"]]],[11,"clone","","",2,[[["self"]],["function"]]],[11,"clone","","",3,[[["self"]],["import"]]],[11,"clone","","",4,[[["self"]],["module"]]],[11,"clone","","",7,[[["self"]],["scope"]]],[11,"clone","","",8,[[["self"]],["variant"]]],[11,"clone","","",9,[[["self"]],["enum"]]],[11,"clone","","",10,[[["self"]],["impl"]]],[11,"clone","","",11,[[["self"]],["struct"]]],[11,"clone","","",12,[[["self"]],["trait"]]],[11,"clone","","",13,[[["self"]],["type"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"write_str","","",6,[[["str"],["self"]],["result"]]]],"p":[[3,"AssociatedType"],[3,"Field"],[3,"Function"],[3,"Import"],[3,"Module"],[3,"Block"],[3,"Formatter"],[3,"Scope"],[3,"Variant"],[3,"Enum"],[3,"Impl"],[3,"Struct"],[3,"Trait"],[3,"Type"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);